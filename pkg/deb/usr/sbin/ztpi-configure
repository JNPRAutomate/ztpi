#!/usr/bin/env python
import sys
import yaml
import netaddr

#handle the generation of the ztpi configuration files

#template locations
dhcpd_conf_j2 = "/opt/ztpi/etc/dhcpd.conf.j2"
isc_dhcp_server_j2 = "/opt/ztpi/etc/isc-dhcp-server.j2"
logrotate_ztp_j2 = "/opt/ztpi/etc/logrotate-ztp.j2"
rsyslogd_ztp_j2 = "/opt/ztpi/etc/rsyslogd-ztp.j2"

#template destinations
dhcpd_conf = "/opt/ztpi/etc/dhcpd.conf"
isc_dhcp_server = "/opt/ztpi/etc/isc-dhcp-server"
logrotate_ztp = "/opt/ztpi/etc/logrotate-ztp"
rsyslogd_ztp = "/opt/ztpi/etc/rsyslogd-ztp"

#ztpi config file
ztpi_config = "/etc/ztpi/ztpi.conf"

#load config file
try:
    ztpi_config_file = open(ztp_config, "r+")
    ztpi_config_data = yaml.load(ztpi_config_file.read())
    ztpi_config_file.close()
except:
    e = sys.exc_info()[0]
    print "Unable to read {0} configuration file".format(ztpi_config)

#generate dhcpd configuration
try:
    #load template file
    dhcpd_tmpl_file = open(dhcpd_conf_j2,"rw+")
    dhcpd_data = dhcpd_tmpl_file.read()
    dhcpd_tmpl_file.close()
    #process template
    dhcpd_tmpl = jinja2.Template(dhcpd_data)
    if 'dhcp-server' in ztpi_config_data.keys():
        dhcpd_file = open(dhcpd_conf,"rw+")
        
except:

#generate isc-dhcp-server configuration
try:
    #default dhcpd interface
    dhcpd_inteface = 'eth0'

    #load template file
    isc_dhcp_server_tmpl_file = open(isc_dhcp_server_j2, "rw+")
    isc_dhcp_server_data = isc_dhcp_server_tmpl_file.read()
    isc_dhcp_server_tmpl_file.close()
    #process template
    isc_dhcp_server_tmpl = jinja2.Template(isc_dhcp_server_data)
    if 'dhcp-server' in ztpi_config_data.keys():
        if 'interface' in ztpi_config_data["dhcp-server"].keys():
            dhcpd_inteface = ztpi_config_data["dhcp-server"]["interface"]

    #write out config file
    isc_dhcp_server_file = open(isc_dhcp_server,"rw+")
    isc_dhcp_server_file.write(isc_dhcp_server_tmpl.render(dhcp_inteface=dhcpd_inteface))
    isc_dhcp_server_file.close()
except:
    e = sys.exc_info()[0]
    print "Unable to read {0} configuration file".format(isc_dhcp_server_j2)

#generate logrotate-ztp configuration
try:
    #default dhcpd interface
    size = '5m'
    rotate = '7'

    #load template file
    logrotate_ztp_tmpl_file = open(logrotate_ztp_j2,"rw+")
    logrotate_ztp_data = logrotate_ztp_tmpl_file.read()
    logrotate_ztp_tmpl_file.close()
    #process template
    logrotate_ztp_tmpl = jinja2.Template(logrotate_ztp_data)
    if 'logging' in ztpi_config_data.keys():
        if 'max-size' in ztpi_config_data['logging'].keys():
            size = ztpi_config_data['logging']['max-size']
        if 'rotate' in ztpi_config_data['logging'].keys():
            rotate = ztpi_config_data['logging']['rotate']

    #write out config file
    logrotate_ztp_file = open(logrotate_ztp,'rw+')
    logrotate_ztp_file.write(logrotate_ztp_tmpl.render(size=size,rotate=rotate))

except:
    e = sys.exc_info()[0]
    print "Unable to read {0} configuration file".format(logrotate_ztp_j2)

#generate rsyslogd-ztp configuration
try:
    #load template file
    rsyslogd_ztp_tmpl_file = open(rsyslogd_ztp_j2,"rw+")
    rsyslogd_ztp_data = rsyslogd_ztp_tmpl_file.read()
    rsyslogd_ztp_tmpl_file.close()
    #process template
    rsyslogd_ztp_tmpl = jinja2.Template(rsyslogd_ztp_data)
    if 'dhcp-server' in ztpi_config_data.keys():
        if 'subnets' in ztpi_config_data['dhcp-server'].keys():
            if len(ztpi_config_data['dhcp-server']['subnets']) > 0:
                tmpl_subnets = []
                #build subnet list
                for item in ztpi_config_data['dhcp-server']['subnets']:
                    new_subnet_mask = netaddr.IPAddress(item["subnet"]["netmask"])
                    new_subnet_str = item["subnet"]["address"]
                    prefix_len = new_subnet_mask.bits().count('1')
                    new_subnet = netaddr.IPNetwork('{0}/{1}'.format(new_subnet_str,str(prefix_len)))
                    new_subnets = list(new_subnet.subnet(24))
                    for s in new_subnets:
                        tmpl_subnets.append({"address":str(s.network).strip(".0")})

                rsyslogd_ztp_file = open(rsyslogd_ztp,"rw+")
                rsyslogd_ztp_file.write(rsyslogd_ztp_tmpl.render(subnets=tmpl_subnets))
                rsyslogd_ztp_file.close()
except:
        e = sys.exc_info()[0]
        print "Unable to read {0} configuration file".format(rsyslogd_ztp_j2)
